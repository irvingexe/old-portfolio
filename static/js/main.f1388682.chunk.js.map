{"version":3,"sources":["store/context.js","components/Lottie.js","serviceWorker.js","store/useGlobalState.js","components/Lazy.js","index.js"],"names":["Context","createContext","Lottie","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","_createClass","key","value","_this2","this","options","wrapper","el","renderer","loop","autoplay","prerender","animationData","setState","anim","lottie","loadAnimation","prevFrame","_this3","React","createElement","ref","c","nextProps","prevState","speed","setSpeed","playFromCurrent","s1","currentFrame","s2","op","playSegments","play","totalFrames","goToAndPlay","playReverse","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","useGlobalState","_useState","useState","cursor","type","project","isOpened","id","section","scroll","y","transform","_useState2","_slicedToArray","actions","action","payload","App","lazy","Lazy","Suspense","fallback","style","backgroundColor","height","display","justifyContent","alignItems","width","smile","Index","store","Provider","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f1388682.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst Context = createContext({});\r\n\r\nexport default Context;","import React, { Component } from \"react\";\r\nimport lottie from \"lottie-web\";\r\n\r\nexport default class Lottie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.options = {\r\n      wrapper: this.el,\r\n      renderer: \"svg\",\r\n      loop: false,\r\n      autoplay: false,\r\n      prerender: true,\r\n      animationData: this.props.animationData,\r\n    };\r\n\r\n    this.setState((state, props) => ({\r\n      anim: lottie.loadAnimation(this.options),\r\n      prevFrame: 0,\r\n    }));\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.speed && prevState.anim) {\r\n      prevState.anim.setSpeed(nextProps.speed);\r\n    }\r\n    if (typeof nextProps.playFromCurrent === \"boolean\" && prevState.anim) {\r\n      let s1 = !nextProps.playFromCurrent\r\n        ? prevState.anim.currentFrame + prevState.prevFrame\r\n        : prevState.anim.currentFrame;\r\n      let s2 = nextProps.playFromCurrent ? prevState.anim.animationData.op : 0;\r\n      prevState.prevFrame = prevState.anim.currentFrame;\r\n      if (s1 !== s2) {\r\n        prevState.anim.playSegments([s1, s2], true);\r\n      }\r\n    }\r\n    if (nextProps.play === true && prevState.anim) {\r\n      if (\r\n        prevState.anim.currentFrame === prevState.anim.totalFrames - 1 ||\r\n        prevState.anim.currentFrame === 0\r\n      ) {\r\n        prevState.anim.goToAndPlay(0, true);\r\n      }\r\n    }\r\n    if (nextProps.playReverse === true && prevState.anim) {\r\n      if (prevState.anim.currentFrame === prevState.anim.totalFrames - 1) {\r\n        prevState.anim.playSegments([prevState.anim.totalFrames - 1, 0], true);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        ref={(c) => {\r\n          this.el = c;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\n\r\nconst useGlobalState = () => {\r\n  const [state, setState] = useState({\r\n    cursor: { type: \"default\" },\r\n    project: { isOpened: false, id: 0 },\r\n    section: \"cover\",\r\n    scroll: { y: 0, transform: 0 },\r\n  });\r\n\r\n  const actions = (action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n      case \"setState\":\r\n        return setState(payload);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  return { state, actions };\r\n};\r\n\r\nexport default useGlobalState;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport Lottie from \"./Lottie\";\r\nimport smile from \"../assets/smile.json\";\r\nconst App = lazy(() => import(\"../App\"));\r\n/*\r\nconst App = lazy(() => {\r\n  return Promise.all([\r\n    import(\"../App\"),\r\n    new Promise((resolve) => setTimeout(resolve, 500)),\r\n  ]).then(([moduleExports]) => moduleExports);\r\n});\r\n*/\r\n\r\nexport default function Lazy() {\r\n  const renderLoader = () => (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#c8baa5\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          width: \"calc(min(25vh, 25vw))\",\r\n          height: \"calc(min(25vh, 25vw))\",\r\n        }}\r\n      >\r\n        <Lottie play={null} animationData={smile} />\r\n      </div>\r\n    </div>\r\n  );\r\n  return (\r\n    <Suspense fallback={renderLoader()}>\r\n      <App />\r\n    </Suspense>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n//import App from './App';\r\n\r\nimport useGlobalState from \"./store/useGlobalState\";\r\nimport Context from \"./store/context\";\r\n\r\nimport Lazy from \"./components/Lazy\";\r\n\r\nconst Index = () => {\r\n  const store = useGlobalState();\r\n\r\n  return (\r\n    <Context.Provider value={store}>\r\n      <Lazy />\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Index />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}